//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WellEmulator.Service.Client.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Settings", Namespace="http://schemas.datacontract.org/2004/07/WellEmulator.Models")]
    [System.SerializableAttribute()]
    public partial class Settings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsReplicateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRunningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan ReplicationPeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan ReportAutoSavePeriodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan SamplingRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan ValuesDelayField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsReplicate {
            get {
                return this.IsReplicateField;
            }
            set {
                if ((this.IsReplicateField.Equals(value) != true)) {
                    this.IsReplicateField = value;
                    this.RaisePropertyChanged("IsReplicate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunning {
            get {
                return this.IsRunningField;
            }
            set {
                if ((this.IsRunningField.Equals(value) != true)) {
                    this.IsRunningField = value;
                    this.RaisePropertyChanged("IsRunning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan ReplicationPeriod {
            get {
                return this.ReplicationPeriodField;
            }
            set {
                if ((this.ReplicationPeriodField.Equals(value) != true)) {
                    this.ReplicationPeriodField = value;
                    this.RaisePropertyChanged("ReplicationPeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan ReportAutoSavePeriod {
            get {
                return this.ReportAutoSavePeriodField;
            }
            set {
                if ((this.ReportAutoSavePeriodField.Equals(value) != true)) {
                    this.ReportAutoSavePeriodField = value;
                    this.RaisePropertyChanged("ReportAutoSavePeriod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan SamplingRate {
            get {
                return this.SamplingRateField;
            }
            set {
                if ((this.SamplingRateField.Equals(value) != true)) {
                    this.SamplingRateField = value;
                    this.RaisePropertyChanged("SamplingRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan ValuesDelay {
            get {
                return this.ValuesDelayField;
            }
            set {
                if ((this.ValuesDelayField.Equals(value) != true)) {
                    this.ValuesDelayField = value;
                    this.RaisePropertyChanged("ValuesDelay");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tag", Namespace="http://schemas.datacontract.org/2004/07/WellEmulator.Models")]
    [System.SerializableAttribute()]
    public partial class Tag : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DeltaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WellNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Delta {
            get {
                return this.DeltaField;
            }
            set {
                if ((this.DeltaField.Equals(value) != true)) {
                    this.DeltaField = value;
                    this.RaisePropertyChanged("Delta");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Group {
            get {
                return this.GroupField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupField, value) != true)) {
                    this.GroupField = value;
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxValue {
            get {
                return this.MaxValueField;
            }
            set {
                if ((this.MaxValueField.Equals(value) != true)) {
                    this.MaxValueField = value;
                    this.RaisePropertyChanged("MaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinValue {
            get {
                return this.MinValueField;
            }
            set {
                if ((this.MinValueField.Equals(value) != true)) {
                    this.MinValueField = value;
                    this.RaisePropertyChanged("MinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Object {
            get {
                return this.ObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjectField, value) != true)) {
                    this.ObjectField = value;
                    this.RaisePropertyChanged("Object");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WellName {
            get {
                return this.WellNameField;
            }
            set {
                if ((object.ReferenceEquals(this.WellNameField, value) != true)) {
                    this.WellNameField = value;
                    this.RaisePropertyChanged("WellName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapItem", Namespace="http://schemas.datacontract.org/2004/07/WellEmulator.Models")]
    [System.SerializableAttribute()]
    public partial class MapItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HistorianTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HistorianWellNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PdgtmTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PdgtmWellNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HistorianTag {
            get {
                return this.HistorianTagField;
            }
            set {
                if ((object.ReferenceEquals(this.HistorianTagField, value) != true)) {
                    this.HistorianTagField = value;
                    this.RaisePropertyChanged("HistorianTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HistorianWellName {
            get {
                return this.HistorianWellNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HistorianWellNameField, value) != true)) {
                    this.HistorianWellNameField = value;
                    this.RaisePropertyChanged("HistorianWellName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PdgtmTag {
            get {
                return this.PdgtmTagField;
            }
            set {
                if ((object.ReferenceEquals(this.PdgtmTagField, value) != true)) {
                    this.PdgtmTagField = value;
                    this.RaisePropertyChanged("PdgtmTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PdgtmWellName {
            get {
                return this.PdgtmWellNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PdgtmWellNameField, value) != true)) {
                    this.PdgtmWellNameField = value;
                    this.RaisePropertyChanged("PdgtmWellName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Well", Namespace="http://schemas.datacontract.org/2004/07/WellEmulator.Models")]
    [System.SerializableAttribute()]
    public partial class Well : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PdgtmValue", Namespace="http://schemas.datacontract.org/2004/07/WellEmulator.Models")]
    [System.SerializableAttribute()]
    public partial class PdgtmValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double GasRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OilRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WaterRateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WellIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double GasRate {
            get {
                return this.GasRateField;
            }
            set {
                if ((this.GasRateField.Equals(value) != true)) {
                    this.GasRateField = value;
                    this.RaisePropertyChanged("GasRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OilRate {
            get {
                return this.OilRateField;
            }
            set {
                if ((this.OilRateField.Equals(value) != true)) {
                    this.OilRateField = value;
                    this.RaisePropertyChanged("OilRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WaterRate {
            get {
                return this.WaterRateField;
            }
            set {
                if ((this.WaterRateField.Equals(value) != true)) {
                    this.WaterRateField = value;
                    this.RaisePropertyChanged("WaterRate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WellId {
            get {
                return this.WellIdField;
            }
            set {
                if ((this.WellIdField.Equals(value) != true)) {
                    this.WellIdField = value;
                    this.RaisePropertyChanged("WellId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HistorianValue", Namespace="http://schemas.datacontract.org/2004/07/WellEmulator.Models")]
    [System.SerializableAttribute()]
    public partial class HistorianValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://WellEmulator.com", ConfigurationName="ServiceReference.IWellEmulator", CallbackContract=typeof(WellEmulator.Service.Client.ServiceReference.IWellEmulatorCallback))]
    public interface IWellEmulator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/SetQueryRange", ReplyAction="http://WellEmulator.com/IWellEmulator/SetQueryRangeResponse")]
        void SetQueryRange(System.TimeSpan timeSpan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/SetQueryRange", ReplyAction="http://WellEmulator.com/IWellEmulator/SetQueryRangeResponse")]
        System.Threading.Tasks.Task SetQueryRangeAsync(System.TimeSpan timeSpan);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetQueryRange", ReplyAction="http://WellEmulator.com/IWellEmulator/GetQueryRangeResponse")]
        System.TimeSpan GetQueryRange();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetQueryRange", ReplyAction="http://WellEmulator.com/IWellEmulator/GetQueryRangeResponse")]
        System.Threading.Tasks.Task<System.TimeSpan> GetQueryRangeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/Connect", ReplyAction="http://WellEmulator.com/IWellEmulator/ConnectResponse")]
        bool Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/Connect", ReplyAction="http://WellEmulator.com/IWellEmulator/ConnectResponse")]
        System.Threading.Tasks.Task<bool> ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/Disconnect", ReplyAction="http://WellEmulator.com/IWellEmulator/DisconnectResponse")]
        void Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/Disconnect", ReplyAction="http://WellEmulator.com/IWellEmulator/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/DisableReplication", ReplyAction="http://WellEmulator.com/IWellEmulator/DisableReplicationResponse")]
        void DisableReplication();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/DisableReplication", ReplyAction="http://WellEmulator.com/IWellEmulator/DisableReplicationResponse")]
        System.Threading.Tasks.Task DisableReplicationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/EnableReplication", ReplyAction="http://WellEmulator.com/IWellEmulator/EnableReplicationResponse")]
        void EnableReplication();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/EnableReplication", ReplyAction="http://WellEmulator.com/IWellEmulator/EnableReplicationResponse")]
        System.Threading.Tasks.Task EnableReplicationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/IsReplicate", ReplyAction="http://WellEmulator.com/IWellEmulator/IsReplicateResponse")]
        bool IsReplicate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/IsReplicate", ReplyAction="http://WellEmulator.com/IWellEmulator/IsReplicateResponse")]
        System.Threading.Tasks.Task<bool> IsReplicateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/IsRunning", ReplyAction="http://WellEmulator.com/IWellEmulator/IsRunningResponse")]
        bool IsRunning();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/IsRunning", ReplyAction="http://WellEmulator.com/IWellEmulator/IsRunningResponse")]
        System.Threading.Tasks.Task<bool> IsRunningAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/Start", ReplyAction="http://WellEmulator.com/IWellEmulator/StartResponse")]
        void Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/Start", ReplyAction="http://WellEmulator.com/IWellEmulator/StartResponse")]
        System.Threading.Tasks.Task StartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/Stop", ReplyAction="http://WellEmulator.com/IWellEmulator/StopResponse")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/Stop", ReplyAction="http://WellEmulator.com/IWellEmulator/StopResponse")]
        System.Threading.Tasks.Task StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/SetSettings", ReplyAction="http://WellEmulator.com/IWellEmulator/SetSettingsResponse")]
        void SetSettings(WellEmulator.Service.Client.ServiceReference.Settings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/SetSettings", ReplyAction="http://WellEmulator.com/IWellEmulator/SetSettingsResponse")]
        System.Threading.Tasks.Task SetSettingsAsync(WellEmulator.Service.Client.ServiceReference.Settings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetSettings", ReplyAction="http://WellEmulator.com/IWellEmulator/GetSettingsResponse")]
        WellEmulator.Service.Client.ServiceReference.Settings GetSettings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetSettings", ReplyAction="http://WellEmulator.com/IWellEmulator/GetSettingsResponse")]
        System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.Settings> GetSettingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/AddTag", ReplyAction="http://WellEmulator.com/IWellEmulator/AddTagResponse")]
        void AddTag(WellEmulator.Service.Client.ServiceReference.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/AddTag", ReplyAction="http://WellEmulator.com/IWellEmulator/AddTagResponse")]
        System.Threading.Tasks.Task AddTagAsync(WellEmulator.Service.Client.ServiceReference.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/RemoveTag", ReplyAction="http://WellEmulator.com/IWellEmulator/RemoveTagResponse")]
        void RemoveTag(int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/RemoveTag", ReplyAction="http://WellEmulator.com/IWellEmulator/RemoveTagResponse")]
        System.Threading.Tasks.Task RemoveTagAsync(int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetTag", ReplyAction="http://WellEmulator.com/IWellEmulator/GetTagResponse")]
        WellEmulator.Service.Client.ServiceReference.Tag GetTag(int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetTag", ReplyAction="http://WellEmulator.com/IWellEmulator/GetTagResponse")]
        System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.Tag> GetTagAsync(int tagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetWitsmlObjects", ReplyAction="http://WellEmulator.com/IWellEmulator/GetWitsmlObjectsResponse")]
        string[] GetWitsmlObjects(string standard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetWitsmlObjects", ReplyAction="http://WellEmulator.com/IWellEmulator/GetWitsmlObjectsResponse")]
        System.Threading.Tasks.Task<string[]> GetWitsmlObjectsAsync(string standard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetWitsmlElements", ReplyAction="http://WellEmulator.com/IWellEmulator/GetWitsmlElementsResponse")]
        string[] GetWitsmlElements(string standard, string @object);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetWitsmlElements", ReplyAction="http://WellEmulator.com/IWellEmulator/GetWitsmlElementsResponse")]
        System.Threading.Tasks.Task<string[]> GetWitsmlElementsAsync(string standard, string @object);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/AddMapItem", ReplyAction="http://WellEmulator.com/IWellEmulator/AddMapItemResponse")]
        void AddMapItem(WellEmulator.Service.Client.ServiceReference.MapItem mapItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/AddMapItem", ReplyAction="http://WellEmulator.com/IWellEmulator/AddMapItemResponse")]
        System.Threading.Tasks.Task AddMapItemAsync(WellEmulator.Service.Client.ServiceReference.MapItem mapItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/RemoveMapItems", ReplyAction="http://WellEmulator.com/IWellEmulator/RemoveMapItemsResponse")]
        void RemoveMapItems(int[] mapItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/RemoveMapItems", ReplyAction="http://WellEmulator.com/IWellEmulator/RemoveMapItemsResponse")]
        System.Threading.Tasks.Task RemoveMapItemsAsync(int[] mapItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetMappings", ReplyAction="http://WellEmulator.com/IWellEmulator/GetMappingsResponse")]
        WellEmulator.Service.Client.ServiceReference.MapItem[] GetMappings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetMappings", ReplyAction="http://WellEmulator.com/IWellEmulator/GetMappingsResponse")]
        System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.MapItem[]> GetMappingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetSettingsTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetSettingsTagsResponse")]
        WellEmulator.Service.Client.ServiceReference.Tag[] GetSettingsTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetSettingsTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetSettingsTagsResponse")]
        System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.Tag[]> GetSettingsTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetAllHistTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetAllHistTagsResponse")]
        string[] GetAllHistTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetAllHistTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetAllHistTagsResponse")]
        System.Threading.Tasks.Task<string[]> GetAllHistTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetHistWells", ReplyAction="http://WellEmulator.com/IWellEmulator/GetHistWellsResponse")]
        string[] GetHistWells();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetHistWells", ReplyAction="http://WellEmulator.com/IWellEmulator/GetHistWellsResponse")]
        System.Threading.Tasks.Task<string[]> GetHistWellsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetHistTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetHistTagsResponse")]
        string[] GetHistTags(string wellName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetHistTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetHistTagsResponse")]
        System.Threading.Tasks.Task<string[]> GetHistTagsAsync(string wellName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetPdgtmTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetPdgtmTagsResponse")]
        string[] GetPdgtmTags(string wellName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetPdgtmTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetPdgtmTagsResponse")]
        System.Threading.Tasks.Task<string[]> GetPdgtmTagsAsync(string wellName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetPdgtmWells", ReplyAction="http://WellEmulator.com/IWellEmulator/GetPdgtmWellsResponse")]
        WellEmulator.Service.Client.ServiceReference.Well[] GetPdgtmWells();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetPdgtmWells", ReplyAction="http://WellEmulator.com/IWellEmulator/GetPdgtmWellsResponse")]
        System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.Well[]> GetPdgtmWellsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetNotMappedHistTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetNotMappedHistTagsResponse")]
        string[] GetNotMappedHistTags(string wellName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetNotMappedHistTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetNotMappedHistTagsResponse")]
        System.Threading.Tasks.Task<string[]> GetNotMappedHistTagsAsync(string wellName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetNotMappedPdgtmTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetNotMappedPdgtmTagsResponse")]
        string[] GetNotMappedPdgtmTags(string wellName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://WellEmulator.com/IWellEmulator/GetNotMappedPdgtmTags", ReplyAction="http://WellEmulator.com/IWellEmulator/GetNotMappedPdgtmTagsResponse")]
        System.Threading.Tasks.Task<string[]> GetNotMappedPdgtmTagsAsync(string wellName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWellEmulatorCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://WellEmulator.com/IWellEmulator/OnPdgtmDataChanged")]
        void OnPdgtmDataChanged(WellEmulator.Service.Client.ServiceReference.PdgtmValue[] pdgtmValues);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://WellEmulator.com/IWellEmulator/OnHistorianDataChanged")]
        void OnHistorianDataChanged(WellEmulator.Service.Client.ServiceReference.HistorianValue[] historianValues);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWellEmulatorChannel : WellEmulator.Service.Client.ServiceReference.IWellEmulator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WellEmulatorClient : System.ServiceModel.DuplexClientBase<WellEmulator.Service.Client.ServiceReference.IWellEmulator>, WellEmulator.Service.Client.ServiceReference.IWellEmulator {
        
        public WellEmulatorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WellEmulatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WellEmulatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WellEmulatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WellEmulatorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SetQueryRange(System.TimeSpan timeSpan) {
            base.Channel.SetQueryRange(timeSpan);
        }
        
        public System.Threading.Tasks.Task SetQueryRangeAsync(System.TimeSpan timeSpan) {
            return base.Channel.SetQueryRangeAsync(timeSpan);
        }
        
        public System.TimeSpan GetQueryRange() {
            return base.Channel.GetQueryRange();
        }
        
        public System.Threading.Tasks.Task<System.TimeSpan> GetQueryRangeAsync() {
            return base.Channel.GetQueryRangeAsync();
        }
        
        public bool Connect() {
            return base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task<bool> ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public void Disconnect() {
            base.Channel.Disconnect();
        }
        
        public System.Threading.Tasks.Task DisconnectAsync() {
            return base.Channel.DisconnectAsync();
        }
        
        public void DisableReplication() {
            base.Channel.DisableReplication();
        }
        
        public System.Threading.Tasks.Task DisableReplicationAsync() {
            return base.Channel.DisableReplicationAsync();
        }
        
        public void EnableReplication() {
            base.Channel.EnableReplication();
        }
        
        public System.Threading.Tasks.Task EnableReplicationAsync() {
            return base.Channel.EnableReplicationAsync();
        }
        
        public bool IsReplicate() {
            return base.Channel.IsReplicate();
        }
        
        public System.Threading.Tasks.Task<bool> IsReplicateAsync() {
            return base.Channel.IsReplicateAsync();
        }
        
        public bool IsRunning() {
            return base.Channel.IsRunning();
        }
        
        public System.Threading.Tasks.Task<bool> IsRunningAsync() {
            return base.Channel.IsRunningAsync();
        }
        
        public void Start() {
            base.Channel.Start();
        }
        
        public System.Threading.Tasks.Task StartAsync() {
            return base.Channel.StartAsync();
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public void SetSettings(WellEmulator.Service.Client.ServiceReference.Settings settings) {
            base.Channel.SetSettings(settings);
        }
        
        public System.Threading.Tasks.Task SetSettingsAsync(WellEmulator.Service.Client.ServiceReference.Settings settings) {
            return base.Channel.SetSettingsAsync(settings);
        }
        
        public WellEmulator.Service.Client.ServiceReference.Settings GetSettings() {
            return base.Channel.GetSettings();
        }
        
        public System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.Settings> GetSettingsAsync() {
            return base.Channel.GetSettingsAsync();
        }
        
        public void AddTag(WellEmulator.Service.Client.ServiceReference.Tag tag) {
            base.Channel.AddTag(tag);
        }
        
        public System.Threading.Tasks.Task AddTagAsync(WellEmulator.Service.Client.ServiceReference.Tag tag) {
            return base.Channel.AddTagAsync(tag);
        }
        
        public void RemoveTag(int tagId) {
            base.Channel.RemoveTag(tagId);
        }
        
        public System.Threading.Tasks.Task RemoveTagAsync(int tagId) {
            return base.Channel.RemoveTagAsync(tagId);
        }
        
        public WellEmulator.Service.Client.ServiceReference.Tag GetTag(int tagId) {
            return base.Channel.GetTag(tagId);
        }
        
        public System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.Tag> GetTagAsync(int tagId) {
            return base.Channel.GetTagAsync(tagId);
        }
        
        public string[] GetWitsmlObjects(string standard) {
            return base.Channel.GetWitsmlObjects(standard);
        }
        
        public System.Threading.Tasks.Task<string[]> GetWitsmlObjectsAsync(string standard) {
            return base.Channel.GetWitsmlObjectsAsync(standard);
        }
        
        public string[] GetWitsmlElements(string standard, string @object) {
            return base.Channel.GetWitsmlElements(standard, @object);
        }
        
        public System.Threading.Tasks.Task<string[]> GetWitsmlElementsAsync(string standard, string @object) {
            return base.Channel.GetWitsmlElementsAsync(standard, @object);
        }
        
        public void AddMapItem(WellEmulator.Service.Client.ServiceReference.MapItem mapItem) {
            base.Channel.AddMapItem(mapItem);
        }
        
        public System.Threading.Tasks.Task AddMapItemAsync(WellEmulator.Service.Client.ServiceReference.MapItem mapItem) {
            return base.Channel.AddMapItemAsync(mapItem);
        }
        
        public void RemoveMapItems(int[] mapItems) {
            base.Channel.RemoveMapItems(mapItems);
        }
        
        public System.Threading.Tasks.Task RemoveMapItemsAsync(int[] mapItems) {
            return base.Channel.RemoveMapItemsAsync(mapItems);
        }
        
        public WellEmulator.Service.Client.ServiceReference.MapItem[] GetMappings() {
            return base.Channel.GetMappings();
        }
        
        public System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.MapItem[]> GetMappingsAsync() {
            return base.Channel.GetMappingsAsync();
        }
        
        public WellEmulator.Service.Client.ServiceReference.Tag[] GetSettingsTags() {
            return base.Channel.GetSettingsTags();
        }
        
        public System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.Tag[]> GetSettingsTagsAsync() {
            return base.Channel.GetSettingsTagsAsync();
        }
        
        public string[] GetAllHistTags() {
            return base.Channel.GetAllHistTags();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllHistTagsAsync() {
            return base.Channel.GetAllHistTagsAsync();
        }
        
        public string[] GetHistWells() {
            return base.Channel.GetHistWells();
        }
        
        public System.Threading.Tasks.Task<string[]> GetHistWellsAsync() {
            return base.Channel.GetHistWellsAsync();
        }
        
        public string[] GetHistTags(string wellName) {
            return base.Channel.GetHistTags(wellName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetHistTagsAsync(string wellName) {
            return base.Channel.GetHistTagsAsync(wellName);
        }
        
        public string[] GetPdgtmTags(string wellName) {
            return base.Channel.GetPdgtmTags(wellName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPdgtmTagsAsync(string wellName) {
            return base.Channel.GetPdgtmTagsAsync(wellName);
        }
        
        public WellEmulator.Service.Client.ServiceReference.Well[] GetPdgtmWells() {
            return base.Channel.GetPdgtmWells();
        }
        
        public System.Threading.Tasks.Task<WellEmulator.Service.Client.ServiceReference.Well[]> GetPdgtmWellsAsync() {
            return base.Channel.GetPdgtmWellsAsync();
        }
        
        public string[] GetNotMappedHistTags(string wellName) {
            return base.Channel.GetNotMappedHistTags(wellName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNotMappedHistTagsAsync(string wellName) {
            return base.Channel.GetNotMappedHistTagsAsync(wellName);
        }
        
        public string[] GetNotMappedPdgtmTags(string wellName) {
            return base.Channel.GetNotMappedPdgtmTags(wellName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNotMappedPdgtmTagsAsync(string wellName) {
            return base.Channel.GetNotMappedPdgtmTagsAsync(wellName);
        }
    }
}
